{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Extract Favicon","text":"<p>Documentation: https://alexmili.github.io/extract_favicon</p> <p>Source Code: https://github.com/alexmili/extract_favicon</p> <p>Extract Favicon is designed to easily retrieve favicons from any website. Built atop robust <code>reachable</code> and <code>BeautifulSoup</code>, it aims to deliver accurate and efficient favicon extraction for web scraping and data analysis workflows.</p> <p>Key features include:</p> <ul> <li>Automatic Extraction: Detects multiple favicon references like <code>&lt;link&gt;</code>, <code>&lt;meta&gt;</code> and inline base64-encoded icons.</li> <li>Smart Fallbacks: When explicit icons aren\u2019t defined, it checks standard fallback routes (like <code>favicon.ico</code>) to provide consistent results even on sites without standard declarations.</li> <li>Size Guessing: Dynamically determines favicon dimensions, even for images lacking explicit size information, by partially downloading and parsing their headers.</li> <li>Base64 Support: Easily handles inline data URLs, decoding base64-encoded images and validating them on-the-fly.</li> <li>Availability Checks: Validates each favicon\u2019s URL, following redirects and marking icons as reachable or not.</li> <li>DuckDuckGo Support: Downloads Favicon directly from DuckDuckGo's public favicon API.</li> <li>Google Support: Downloads Favicon directly from Google's public favicon API.</li> <li>Custom Strategy: Sets the order in which the different available techniques are used to retrieve the best favicon.</li> <li>Generate Favicon: Generate a default SVG favicon when none are available.</li> <li>Get Best Favicon: Easily gets the best Favicon available, generate one if none are found.</li> <li>Async Support: Offers asynchronous methods (via <code>asyncio</code>) to efficiently handle multiple favicon extractions concurrently, enhancing overall performance when dealing with numerous URLs.</li> </ul>"},{"location":"#installation","title":"Installation","text":"<p>Create and activate a virtual environment and then install <code>extract_favicon</code>:</p> <pre><code>$ pip install extract_favicon\n</code></pre>"},{"location":"#usage","title":"Usage","text":""},{"location":"#extracting-favicons-from-html","title":"Extracting Favicons from HTML","text":"<p>The <code>from_html</code> function allows you to parse a given HTML string and extract all favicons referenced within it. It looks for common <code>&lt;link&gt;</code> and <code>&lt;meta&gt;</code> tags that reference icons (e.g., <code>icon</code>, <code>shortcut icon</code>, <code>apple-touch-icon</code>, etc.). If <code>include_fallbacks</code> is set to <code>True</code>, it will also check standard fallback paths like <code>favicon.ico</code> when no icons are explicitly defined.</p> <p>Example: <pre><code>html_content = \"\"\"\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;link rel=\"icon\" href=\"https://example.com/favicon.ico\" /&gt;\n  &lt;link rel=\"apple-touch-icon\" href=\"/apple-touch-icon.png\"&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;p&gt;Sample page&lt;/p&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n\"\"\"\n\nfavicons = from_html(html_content, root_url=\"https://example.com\", include_fallbacks=True)\nfor favicon in favicons:\n    print(favicon.url, favicon.width, favicon.height)\n</code></pre></p>"},{"location":"#extracting-favicons-from-a-url","title":"Extracting Favicons from a URL","text":"<p>If you only have a URL and want to directly extract favicons, <code>from_url</code> fetches the page, parses it, and returns a set of <code>Favicon</code> objects. It uses <code>Reachable</code> internally to check if the URL is accessible. If <code>include_fallbacks</code> is True, fallback icons (like <code>/favicon.ico</code>) are also considered.</p> <pre><code>favicons = from_url(\"https://example.com\", include_fallbacks=True)\nfor favicon in favicons:\n    print(favicon.url, favicon.format, favicon.width, favicon.height)\n</code></pre>"},{"location":"#downloading-favicons","title":"Downloading Favicons","text":"<p>Depending on the mode, you can choose to download:</p> <ul> <li>\"all\": Download all favicons.</li> <li>\"biggest\": Download only the largest favicon (by area).</li> <li>\"smallest\": Download only the smallest favicon.</li> </ul> <p>If <code>include_unknown</code> is False, favicons without known dimensions are skipped. The <code>sort</code> option sorts the returned favicons by size, and <code>sleep_time</code> controls how long to wait between requests to avoid rate limits.</p> <p>The result is a list of <code>RealFavicon</code> objects, which contain additional information like the loaded image or raw SVG data.</p> <pre><code>favicons = from_url(\"https://example.com\")\nreal_favicons = download(favicons, mode=\"all\", sort=\"DESC\")\n\nfor real_favicon in real_favicons:\n    print(real_favicon.url.url, real_favicon.valid, real_favicon.width, real_favicon.height)\n</code></pre>"},{"location":"#checking-favicon-availability","title":"Checking Favicon Availability","text":"<p>Sends a HEAD request for each favicon URL to determine if it\u2019s reachable. If the favicon has been redirected, it updates the URL accordingly. It also sets the reachable attribute on each Favicon. The <code>sleep_time</code> parameter lets you pause between checks to reduce the load on the target server.</p> <pre><code>favicons = from_url(\"https://example.com\")\nchecked_favicons = check_availability(favicons)\n\nfor favicon in checked_favicons:\n    print(favicon.url, favicon.reachable)\n</code></pre>"},{"location":"#guessing-favicon-sizes","title":"Guessing Favicon Sizes","text":"<p>If some extracted favicons don\u2019t have their dimensions specified, <code>guess_missing_sizes</code> can attempt to determine their width and height. For base64-encoded favicons (data URLs), setting <code>load_base64_img</code> to <code>True</code> allows the function to decode and load the image in memory to get its size. For external images, it partially downloads the image to guess its dimensions without retrieving the entire file.</p> <pre><code>favicons = from_url(\"https://example.com\")\n# Some favicons may not have width/height info\nfavicons_with_sizes = guess_missing_sizes(favicons, load_base64_img=True)\n\nfor favicon in favicons_with_sizes:\n    print(favicon.url, favicon.width, favicon.height)\n</code></pre>"},{"location":"#generating-a-favicon","title":"Generating a Favicon","text":"<p>The generate_favicon function builds a simple placeholder favicon in SVG format based on the first letter of the domain. It\u2019s useful when other methods fail or if you need a fallback icon quickly.</p> <pre><code>placeholder_favicon = generate_favicon(\"https://example.com\")\n\n# The Favicon object contains the SVG data as if it were a real icon.\nprint(\"Generated favicon URL:\", placeholder_favicon.url)\n</code></pre>"},{"location":"#get-the-best-favicon-available","title":"Get the Best Favicon Available","text":"<p>The <code>get_best_favicon</code> function tries multiple techniques in a specified order to find the best possible favicon. By default, the order is:</p> <ul> <li><code>content</code>: Attempts to extract favicons from HTML or directly from the URL.</li> <li><code>duckduckgo</code>: Fetches a favicon from DuckDuckGo if the first step fails.</li> <li><code>google</code>: Retrieves a favicon from Google if the previous steps fails.</li> <li><code>generate</code>: Generates a placeholder if no other method is successful.</li> </ul> <p>The function returns the first valid favicon found or None if none is discovered.</p> <pre><code>best_icon = get_best_favicon(\"https://example.com\")\n\nif best_icon:\n    print(\"Best favicon URL:\", best_icon.url)\n    print(\"Favicon dimensions:\", best_icon.width, \"x\", best_icon.height)\nelse:\n    print(\"No valid favicon found for this URL.\")\n</code></pre>"},{"location":"#dependencies","title":"Dependencies","text":"<p>When you install <code>extract_favicon</code> it comes with the following dependencies:</p> <ul> <li><code>BeautifulSoup</code> - to parse HTML content.</li> <li><code>Pillow</code> - to load images to get real size once downloaded and to guess image size based on its streamed headers.</li> <li><code>Reachable</code> - to check availability of favicons' URLs, download content and handle redirects, HTTP errors and some simple anti-bot protections.</li> <li><code>DefusedXML</code> - to parse and check validity of SVG files.</li> <li><code>TLDextract</code> - to parse and extract domain information from URL.</li> </ul>"},{"location":"#inspiration","title":"Inspiration","text":"<p>This library is an extension of the favicon package.</p>"},{"location":"#license","title":"License","text":"<p>This project is licensed under the terms of the MIT license.</p>"},{"location":"reference/","title":"Reference","text":""},{"location":"reference/#extract_favicon.main.from_html","title":"<code>from_html(html, root_url=None, include_fallbacks=False)</code>","text":"<p>Extract all favicons in a given HTML.</p> <p>Parameters:</p> Name Type Description Default <code>html</code> <code>str</code> <p>HTML to parse.</p> required <code>root_url</code> <code>Optional[str]</code> <p>Root URL where the favicon is located.</p> <code>None</code> <code>include_fallbacks</code> <code>bool</code> <p>Whether to include fallback favicons like <code>/favicon.ico</code>.</p> <code>False</code> <p>Returns:</p> Type Description <code>set[Favicon]</code> <p>A set of favicons.</p>"},{"location":"reference/#extract_favicon.main.from_url","title":"<code>from_url(url, include_fallbacks=False, client=None)</code>","text":"<p>Extracts favicons from a given URL.</p> <p>This function attempts to retrieve the specified URL, parse its HTML, and extract any associated favicons. If the URL is reachable and returns a successful response, the function will parse the content for favicon references. If <code>include_fallbacks</code> is True, it will also attempt to find fallback icons (e.g., by checking default icon paths). If the URL is not reachable or returns an error response, an empty set is returned.</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> <p>The URL from which to extract favicons.</p> required <code>include_fallbacks</code> <code>bool</code> <p>Whether to include fallback favicons if none are explicitly defined. Defaults to False.</p> <code>False</code> <code>client</code> <code>Optional[Client]</code> <p>A custom client instance from <code>reachable</code> package to use for performing the HTTP request. If None, a default client configuration is used.</p> <code>None</code> <p>Returns:</p> Type Description <code>set[Favicon]</code> <p>A set of <code>Favicon</code> objects found in the target URL's HTML.</p>"},{"location":"reference/#extract_favicon.main.from_duckduckgo","title":"<code>from_duckduckgo(url, client=None)</code>","text":"<p>Retrieves a website's favicon via DuckDuckGo's Favicon public API.</p> <p>This function uses <code>tldextract</code> to parse the given URL and constructs a DuckDuckGo favicon URL using the top-level domain. It then fetch and populate a <code>Favicon</code> object with any available metadata (e.g., width, height and reachability).</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> <p>The target website URL.</p> required <code>client</code> <code>Optional[Client]</code> <p>A custom HTTP client to use for the request</p> <code>None</code> <p>Returns:</p> Type Description <code>Favicon</code> <p>A <code>Favicon</code> object containing favicon data.</p>"},{"location":"reference/#extract_favicon.main.from_google","title":"<code>from_google(url, client=None, size=256)</code>","text":"<p>Retrieves a website's favicon via Google's Favicon public API.</p> <p>This function uses <code>tldextract</code> to parse the given URL and constructs a Google favicon URL using the top-level domain. It then fetch and populate a <code>Favicon</code> object with any available metadata (e.g., width, height and reachability).</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> <p>The target website URL.</p> required <code>client</code> <code>Optional[Client]</code> <p>A custom HTTP client to use for the request</p> <code>None</code> <p>Returns:</p> Type Description <code>Favicon</code> <p>A <code>Favicon</code> object containing favicon data.</p>"},{"location":"reference/#extract_favicon.main.download","title":"<code>download(favicons, mode='all', include_unknown=True, sleep_time=2, sort='ASC', client=None)</code>","text":"<p>Download previsouly extracted favicons.</p> <p>Parameters:</p> Name Type Description Default <code>favicons</code> <code>Union[list[Favicon], set[Favicon]]</code> <p>list of favicons to download.</p> required <code>mode</code> <code>str</code> <p>select the strategy to download favicons. - <code>all</code>: download all favicons in the list. - <code>largest</code>: only download the largest favicon in the list. - <code>smallest</code>: only download the smallest favicon in the list.</p> <code>'all'</code> <code>include_unknown</code> <code>bool</code> <p>include or not images with no width/height information.</p> <code>True</code> <code>sleep_time</code> <code>int</code> <p>number of seconds to wait between each requests to avoid blocking.</p> <code>2</code> <code>sort</code> <code>str</code> <p>sort favicons by size in ASC or DESC order. Only used for mode <code>all</code>.</p> <code>'ASC'</code> <code>client</code> <code>Optional[Client]</code> <p>A custom client instance from <code>reachable</code> package to use for performing the HTTP request. If None, a default client configuration is used.</p> <code>None</code> <p>Returns:</p> Type Description <code>list[Favicon]</code> <p>A list of favicons.</p>"},{"location":"reference/#extract_favicon.main.guess_size","title":"<code>guess_size(favicon, chunk_size=512, force=False, client=None)</code>","text":"<p>Get size of image by requesting first bytes.</p> <p>Parameters:</p> Name Type Description Default <code>favicon</code> <code>Favicon</code> <p>the favicon object from which to guess the size.</p> required <code>chunk_size</code> <code>int</code> <p>bytes size to iterate over image stream.</p> <code>512</code> <code>force</code> <code>bool</code> <p>try to guess the size even if the width and height are not zero.</p> <code>False</code> <p>Returns:</p> Type Description <code>Favicon</code> <p>The Favicon object with updated width, height, reachable and http parameters.</p>"},{"location":"reference/#extract_favicon.main.guess_missing_sizes","title":"<code>guess_missing_sizes(favicons, chunk_size=512, sleep_time=1, load_base64_img=False, client=None)</code>","text":"<p>Attempts to determine missing dimensions (width and height) of favicons.</p> <p>For each favicon in the provided collection, if the favicon is a base64-encoded image (data URL) and <code>load_base64_img</code> is True, the function decodes and loads the image to guess its dimensions. For non-base64 favicons with missing or zero dimensions, the function attempts to guess the size by partially downloading the icon data (using <code>guess_size</code>).</p> <p>Parameters:</p> Name Type Description Default <code>favicons</code> <code>Union[list[Favicon], set[Favicon]]</code> <p>A list or set of <code>Favicon</code> objects for which to guess missing dimensions.</p> required <code>chunk_size</code> <code>int</code> <p>The size of the data chunk to download for guessing dimensions of non-base64 images. Defaults to 512.</p> <code>512</code> <code>sleep_time</code> <code>int</code> <p>The number of seconds to sleep between guessing attempts to avoid rate limits or overloading the server. Defaults to 1.</p> <code>1</code> <code>load_base64_img</code> <code>bool</code> <p>Whether to decode and load base64-encoded images (data URLs) to determine their dimensions. Defaults to False.</p> <code>False</code> <p>Returns:</p> Type Description <code>list[Favicon]</code> <p>A list of <code>Favicon</code> objects with dimensions updated where they could be determined.</p>"},{"location":"reference/#extract_favicon.main.check_availability","title":"<code>check_availability(favicons, sleep_time=1, force=False, client=None)</code>","text":"<p>Checks the availability and final URLs of a collection of favicons.</p> <p>For each favicon in the provided list or set, this function sends a head request (or an optimized request if available) to check whether the favicon's URL is reachable. If the favicon is reachable, its <code>reachable</code> attribute is updated to True. If the request results in a redirect, the favicon's URL is updated to the final URL.</p> <p>A delay (<code>sleep_time</code>) can be specified between checks to avoid rate limits or overloading the server.</p> <p>Parameters:</p> Name Type Description Default <code>favicons</code> <code>Union[list[Favicon], set[Favicon]]</code> <p>A collection of <code>Favicon</code> objects to check for availability.</p> required <code>sleep_time</code> <code>int</code> <p>Number of seconds to sleep between each availability check to control request rate. Defaults to 1.</p> <code>1</code> <code>force</code> <code>bool</code> <p>Check again the availability even if it has already been checked.</p> <code>False</code> <code>client</code> <code>Optional[Client]</code> <p>A custom client instance from <code>reachable</code> package to use for performing the HTTP request. If None, a default client configuration is used.</p> <code>None</code> <p>Returns:</p> Type Description <code>list[Favicon]</code> <p>A list of <code>Favicon</code> objects with updated <code>reachable</code> statuses and potentially updated URLs if redirects were encountered.</p>"},{"location":"reference/#extract_favicon.main.generate_favicon","title":"<code>generate_favicon(url)</code>","text":"<p>Generates a placeholder favicon as an SVG containing the first letter of the domain.</p> <p>This function extracts the domain name from the provided URL using <code>tldextract</code>, takes the first letter of the domain (capitalized), and embeds it into an SVG image. The generated SVG is then loaded into a <code>Favicon</code> object.</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> <p>The URL from which to extract the domain and generate the favicon.</p> required <p>Returns:</p> Type Description <code>Favicon</code> <p>A <code>Favicon</code> instance populated with the generated SVG data.</p>"},{"location":"reference/#extract_favicon.main.get_best_favicon","title":"<code>get_best_favicon(url, html=None, client=None, strategy=['content', 'duckduckgo', 'google', 'generate'], include_fallbacks=True)</code>","text":"<p>Attempts to retrieve the best favicon for a given URL using multiple strategies.</p> <p>The function iterates over the specified strategies in order, stopping as soon as a valid favicon is found:     - \"content\": Parses the provided HTML (if any) or fetches page content from the URL to     extract favicons. It then guesses missing sizes, checks availability, and downloads     the largest icon.     - \"duckduckgo\": Retrieves a favicon from DuckDuckGo if the previous step fails.     - \"google\": Retrieves a favicon from Google if the previous step fails.     - \"generate\": Generates a placeholder favicon if all else fails.</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> <p>The URL for which the favicon is being retrieved.</p> required <code>html</code> <code>Optional[Union[str, bytes]]</code> <p>Optional HTML content to parse. If not provided, the page content is retrieved from the URL.</p> <code>None</code> <code>client</code> <code>Optional[Client]</code> <p>Optional HTTP client to use for network requests.</p> <code>None</code> <code>strategy</code> <code>list[str]</code> <p>A list of strategy names to attempt in sequence. Defaults to [\"content\", \"duckduckgo\", \"google\", \"generate\"].</p> <code>['content', 'duckduckgo', 'google', 'generate']</code> <code>include_fallbacks</code> <code>bool</code> <p>check for fallbacks URL for <code>content</code> strategy.</p> <code>True</code> <p>Returns:</p> Type Description <code>Optional[Favicon]</code> <p>The best found favicon if successful, otherwise None.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If an unrecognized strategy name is encountered in the list.</p>"}]}